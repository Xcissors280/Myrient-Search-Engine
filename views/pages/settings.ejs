<div class="row h-50 w-100 m-0">
  <div class="col-sm-12 my-auto text-center">
    <pre style="font: 20px / 19px monospace; color: white; text-align: center; overflow: hidden;">
______  ___              _____            _____ 
___   |/  /____  ___________(_)_____________  /_
__  /|_/ /__  / / /_  ___/_  /_  _ \_  __ \  __/
_  /  / / _  /_/ /_  /   _  / /  __/  / / / /_  
/_/  /_/  _\__, / /_/    /_/  \___//_/ /_/\__/  
          /____/                                
                                Settings
        </pre>
    <div class="card w-auto mx-auto text-center d-inline-block p-3">
      <form>
        <div class="form-group">
          <h4>Search Columns</h4>
          <div class="">
            <% for(let field in defaultSettings.fields) { %>
            <label class="checkbox-inline p-1" for="<%= defaultSettings.fields[field] %>">
              <input type="checkbox" name="<%= defaultSettings.fields[field] %>" id="<%= defaultSettings.fields[field] %>" value="true">
              <%= defaultSettings.fields[field].charAt(0).toUpperCase() + defaultSettings.fields[field].slice(1) %>
            </label>
            <% } %>
          </div>
        </div>
        <div class="form-group">
          <h4>Search Score Multiplier</h4>
          <div class="">
            <% for(let field in defaultSettings.boost) { %>
            <div class="d-inline-block">
              <label for="<%= field %>boost"><%= field.charAt(0).toUpperCase() + field.slice(1) %></label>
              <input type="number" pattern="\d*" class="form-control bg-dark text-white" name="<%= field %>boost" id="<%= field %>boost" min="1" max="5">
            </div>
            <% } %>
          </div>
        </div>
        <div class="form-group">
          <h4>Extras</h4>
          <div class="form-group">
            <div class="d-inline-block">
              <label for="fuzzy">Fuzzy Value</label>
              <input type="number" class="form-control bg-dark text-white" id="fuzzy" name="fuzzy" step="0.01" min="0" max="1">
            </div>
          </div>
          <div class="form-group">
            <div class="">
              <label class="checkbox-inline p-1">
                <input type="checkbox" id="prefix" value="true">
                Allow Prefixes
              </label>
              <label class="checkbox-inline p-1">
                <input type="checkbox" id="combineWith" value="AND">
                Match All Words
              </label>
            </div>
          </div>
        </div>
        <button type="button" class="btn btn-secondary mb-2" action="#" id="saveSettings">Save Settings</button>
      </form>
    </div>
  </div>
</div>

    <script defer>
      defaults = <%-JSON.stringify(defaultSettings)%>
      settingStore = localStorage.getItem('settings')
      settings = undefined

      function setBoosts(){
        for(let boost in defaults.boost){
          if(typeof settings.boost[boost] == 'undefined') {settings.boost[boost] == defaults.boost[boost]}
          document.getElementById(boost + 'boost').value = settings.boost[boost]
          document.getElementById(boost + 'boost').addEventListener('keyup', () => {
            validate(document.getElementById(boost + 'boost'))
          })
        }
      }

      function setColumns(){
        for(let field in settings.fields){
          let element = document.getElementById(settings.fields[field])
          if(!element){settings.fields.splice(field, 1)}
          else{element.checked = true}
        }
        for(let field in defaults.fields){
          document.getElementById(defaults.fields[field]).addEventListener('change', () => {
            toggleLinkedTextBox(document.getElementById(defaults.fields[field]), document.getElementById(defaults.fields[field] + 'boost'))
          })
          let elem = document.getElementById(defaults.fields[field])
          if(!elem.checked){
            let boostField = document.getElementById(defaults.fields[field] + 'boost')
            boostField.classList.add('text-secondary')
            boostField.disabled = true
          }
        }
      }
      //combinewith fuzzy prefix
      function setOthers(){
        if(typeof settings.combineWith == 'undefined') {settings.combineWith = defaults.combineWith}
        if(typeof settings.fuzzy == 'undefined') {settings.fuzzy = defaults.fuzzy}
        if(typeof settings.prefix == 'undefined') {settings.prefix = defaults.prefix}
        document.getElementById('combineWith').checked = settings.combineWith ? true : false
        document.getElementById('fuzzy').value = settings.fuzzy
        document.getElementById('prefix').checked = settings.prefix
      }

      function saveSettings(){
        for(let boost in defaults.boost){settings.boost[boost] = parseInt(document.getElementById(boost + 'boost').value)}
        settings.fields = []
        for(let field in defaults.fields){
          if(document.getElementById(defaults.fields[field]).checked){
            settings.fields.push(defaults.fields[field])
          }
        }
        settings.combineWith = document.getElementById('combineWith').checked ? 'AND' : ''
        settings.fuzzy = parseFloat (document.getElementById('fuzzy').value)
        settings.prefix = document.getElementById('prefix').checked
        localStorage.setItem('settings', JSON.stringify(settings  ))
        window.location.href = '/'
      }

      function loadSettings(){
            if(!settingStore) {settings = defaults}
        else{
          try{
            settings = JSON.parse(settingStore)
          }
          catch{
            //load defaults if not exist
            settings = defaults
          }
        }
        setBoosts()
        setColumns()
        setOthers()
      }
      document.body.onload = loadSettings
      document.getElementById('saveSettings').onclick = saveSettings

      function validate(element){
        let max = parseInt(element.max)
        let min = parseInt(element.min)
        let value = parseInt(element.value)
        if(value > max) {element.value = max}
        if(value < min) {element.value = min}
        console.log(max, min, value)
      }
      fuzzyElem = document.getElementById('fuzzy')
      fuzzyElem.addEventListener('keyup', () => {
        validate(fuzzyElem)
      })
      function toggleLinkedTextBox(checkBox, textBox){
        if(!    checkBox.checked) {
          textBox.classList.add('text-secondary')
          textBox.disabled = true
        }
        else {
          textBox.classList.remove('text-secondary')
          textBox.disabled = false
        }
      }
  </script>   